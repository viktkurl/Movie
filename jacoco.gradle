apply plugin: 'jacoco'

tasks.withType(Test) {
	jacoco.includeNoLocationClasses = true
}

jacoco {
	toolVersion = "$jacoco_version"
}

project.afterEvaluate {
	// Grab all build types and product flavors
	def buildTypes = android.buildTypes.collect { type -> type.name }
	def productFlavors = android.productFlavors.collect { flavor -> flavor.name }

	// When no product flavors defined, use empty
	if (!productFlavors) productFlavors.add('')

	productFlavors.each { productFlavorName ->
		buildTypes.each { buildTypeName ->
			def sourceName, sourcePath
			if (!productFlavorName) {
				sourceName = sourcePath = "${buildTypeName}"
			} else {
				sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
				sourcePath = "${productFlavorName}/${buildTypeName}"
			}
			def testTaskName = "test${sourceName.capitalize()}UnitTest"
			task "${testTaskName}Coverage"(type: JacocoReport, dependsOn: "$testTaskName") {
				group = "Reporting"
				description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."
				reports {
					xml.enabled = false
					csv.enabled = false
					html.enabled = true
				}

				classDirectories = fileTree(
						dir: "${project.buildDir}/intermediates/classes/${sourcePath}",
						excludes: ['**/R.class',
								   '**/R$*.class',
								   '**/*$ViewInjector*.*',
								   '**/*$ViewBinder*.*',
								   '**/*$*$*.*', // Anonymous classes generated by kotlin
								   '**/BuildConfig.*',
								   '**/Manifest*.*']
				) + fileTree(
						dir: "$buildDir/tmp/kotlin-classes/${buildTypeName}",
						excludes: ['**/R.class',
								   '**/R$*.class',
								   '**/*$ViewInjector*.*',
								   '**/*$ViewBinder*.*',
								   '**/*$*$*.*', // Anonymous classes generated by kotlin
								   '**/BuildConfig.*',
								   '**/Manifest*.*']
				)

				def coverageSourceDirs = [
						"src/main/java",
						"src/main/kotlin",
						"src/$productFlavorName/java",
						"src/$buildTypeName/java",
						"src/$productFlavorName/kotlin",
						"src/$buildTypeName/kotlin"
				]
				additionalSourceDirs = files(coverageSourceDirs)
				sourceDirectories = files(coverageSourceDirs)
				executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")
			}
		}
	}
}