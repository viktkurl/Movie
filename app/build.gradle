apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'jacoco'

apply plugin: 'pmd'

apply plugin: 'kotlin-kapt'

jacoco {
	toolVersion = "$jacoco_version"
}

tasks.withType(Test) {
	jacoco.includeNoLocationClasses = true
}

android {
	compileSdkVersion 28
	defaultConfig {
		applicationId "ru.vd.movie"
		minSdkVersion 15
		targetSdkVersion 28
		versionCode 1
		versionName "1.0"
		testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
	}
	sourceSets {
		main.java.srcDirs += 'src/main/kotlin'
		test.java.srcDirs += 'src/test/kotlin'
		androidTest.java.srcDirs += 'src/androidTest/kotlin'
	}
	buildTypes {
		release {
			minifyEnabled true
			shrinkResources true
			testCoverageEnabled true
			debuggable true
			jniDebuggable false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
		}

		preRelease {
			minifyEnabled true
			testCoverageEnabled true
			shrinkResources false
			debuggable true
			jniDebuggable true
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
		}

		debug {
			minifyEnabled false
			testCoverageEnabled true
			shrinkResources false
			jniDebuggable true
			debuggable true
		}
	}
	dexOptions {
		javaMaxHeapSize "5g"
	}
	kapt {
		correctErrorTypes = true
	}
	testOptions {
		unitTests {
			includeAndroidResources = true
		}
	}
	lintOptions {
		//lint rules of conduct
		warningsAsErrors true
		abortOnError true
		htmlReport true
		//locations for the rules and output
		lintConfig file("${rootDir}/config/lint/lint-config.xml")
		htmlOutput file("${buildDir}/reports/lint/lint.html")
	}
}

project.afterEvaluate {
	// Grab all build types and product flavors
	def buildTypes = android.buildTypes.collect { type -> type.name }
	def productFlavors = android.productFlavors.collect { flavor -> flavor.name }

	// When no product flavors defined, use empty
	if (!productFlavors) productFlavors.add('')

	productFlavors.each { productFlavorName ->
		buildTypes.each { buildTypeName ->
			def sourceName, sourcePath
			if (!productFlavorName) {
				sourceName = sourcePath = "${buildTypeName}"
			} else {
				sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
				sourcePath = "${productFlavorName}/${buildTypeName}"
			}
			def testTaskName = "test${sourceName.capitalize()}UnitTest"
			task "${testTaskName}Coverage"(type: JacocoReport, dependsOn: "$testTaskName") {
				group = "Reporting"
				description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."
				reports {
					xml.enabled = false
					csv.enabled = false
					html.enabled = true
				}

				classDirectories = fileTree(
						dir: "${project.buildDir}/intermediates/classes/${sourcePath}",
						excludes: ['**/R.class',
								   '**/R$*.class',
								   '**/*$ViewInjector*.*',
								   '**/*$ViewBinder*.*',
								   '**/*$*$*.*', // Anonymous classes generated by kotlin
								   '**/BuildConfig.*',
								   '**/Manifest*.*']
				) + fileTree(
						dir: "$buildDir/tmp/kotlin-classes/${buildTypeName}",
						excludes: ['**/R.class',
								   '**/R$*.class',
								   '**/*$ViewInjector*.*',
								   '**/*$ViewBinder*.*',
								   '**/*$*$*.*', // Anonymous classes generated by kotlin
								   '**/BuildConfig.*',
								   '**/Manifest*.*']
				)

				def coverageSourceDirs = [
						"src/main/java",
						"src/main/kotlin",
						"src/$productFlavorName/java",
						"src/$buildTypeName/java",
						"src/$productFlavorName/kotlin",
						"src/$buildTypeName/kotlin"
				]
				additionalSourceDirs = files(coverageSourceDirs)
				sourceDirectories = files(coverageSourceDirs)
				executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")
			}
		}
	}
}

dependencies {
	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
	implementation 'com.android.support:appcompat-v7:28.0.0'
	implementation 'com.android.support.constraint:constraint-layout:1.1.3'
	testImplementation 'junit:junit:4.12'
	androidTestImplementation 'com.android.support.test:runner:1.0.2'
	androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

	implementation 'com.google.dagger:dagger:2.16'
	annotationProcessor 'com.google.dagger:dagger-compiler:2.16'
	kapt 'com.google.dagger:dagger-compiler:2.16'
}
